services:
  mongodb-container:
    image: microecommerceregistry.azurecr.io/ecommerce-mongodb:latest
    build:
      context: ./mongodb
      dockerfile: Dockerfile
    env_file:
      - ./mongodb/mongodb-secrets.env # (empty or auth vars if you enable MongoDB auth)
    ports:
      - "27017:27017"
    networks:
      - orders-mongodb-network

  mysql-container:
    image: microecommerceregistry.azurecr.io/ecommerce-mysql:latest
    build:
      context: ./mysql
      dockerfile: Dockerfile
    env_file:
      - ./mysql/mysql-secrets.env # defines MYSQL_ROOT_PASSWORD, MYSQL_USER, MYSQL_PASSWORD
    environment:
      - MYSQL_DATABASE=ecommerceproductsdatabase # non-sensitive config
    volumes:
      - ./mysql/initdb:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    networks:
      - products-mysql-network

  postgres-container:
    image: microecommerceregistry.azurecr.io/ecommerce-postgres:latest
    build:
      context: ./postgres
      dockerfile: Dockerfile
    env_file:
      - ./postgres/postgres-secrets.env # defines POSTGRES_PASSWORD (and optional POSTGRES_USER)
    volumes:
      - ./postgres/initdb:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - orders-mongodb-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - ecommerce-network

  rabbitmq:
    image: microecommerceregistry.azurecr.io/rabbitmq:4.1.0-management
    env_file:
      - ./rabbitmq/rabbitmq-secrets.env # defines RABBITMQ_DEFAULT_USER, RABBITMQ_DEFAULT_PASS
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - ecommerce-network

  apigateway:
    image: microecommerceregistry.azurecr.io/apigateway:latest
    build:
      context: ./eCommerceSolution.OrdersService
      dockerfile: ApiGateway/Dockerfile
    ports:
      - "5000:8080"
    networks:
      - ecommerce-network
    depends_on:
      - orders-microservice
      - products-microservice
      - users-microservice

  users-microservice:
    image: microecommerceregistry.azurecr.io/users-microservice:latest
    build:
      context: ./eCommerceSolution.UsersService
      dockerfile: eCommerce.API/Dockerfile
    env_file:
      - ./postgres/postgres-secrets.env # uses postgres-secrets.env in postgres folder
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - POSTGRES_HOST=postgres-container
      - POSTGRES_PORT=5432
      - POSTGRES_DB=eCommerceUsers
      # POSTGRES_USER & POSTGRES_PASSWORD from env_file
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_PRODUCTS_EXCHANGE=users.exchange
    networks:
      - users-postgres-network
      - ecommerce-network
    depends_on:
      - postgres-container

  products-microservice:
    image: microecommerceregistry.azurecr.io/products-microservice:latest
    build:
      context: ./eCommerceSolution.ProductsService
      dockerfile: ProductsMicroService.API/Dockerfile
    env_file:
      - ./mysql/mysql-secrets.env # uses mysql-secrets.env for products
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - MYSQL_HOST=mysql-container
      - MYSQL_PORT=3306
      - MYSQL_DB=ecommerceproductsdatabase
      # MYSQL_USER & MYSQL_PASSWORD from env_file
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_PRODUCTS_EXCHANGE=products.exchange
    networks:
      - products-mysql-network
      - ecommerce-network
    depends_on:
      - mysql-container

  orders-microservice:
    image: microecommerceregistry.azurecr.io/orders-microservice:latest
    build:
      context: ./eCommerceSolution.OrdersService
      dockerfile: OrdersMicroservice.API/Dockerfile
    # env_file:
    #   - ./orders/orders-secrets.env    # commented out; using defaults
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - MONGODB_HOST=mongodb-container
      - MONGODB_PORT=27017
      - MONGODB_DATABASE=OrdersDatabase
      # MongoDB auth from env_file if needed
      - UsersMicroservicePort=8080
      - UsersMicroserviceName=apigateway
      - ProductsMicroservicePort=8080
      - ProductsMicroserviceName=apigateway
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_PRODUCTS_EXCHANGE=orders.exchange
    networks:
      - orders-mongodb-network
      - ecommerce-network
    depends_on:
      - mongodb-container
      - rabbitmq
      - redis

networks:
  ecommerce-network:
    driver: bridge
  users-postgres-network:
    driver: bridge
  products-mysql-network:
    driver: bridge
  orders-mongodb-network:
    driver: bridge
